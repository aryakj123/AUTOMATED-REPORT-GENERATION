pip install reportlab pandas


import pandas as pd
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors


def analyze_data(file_path):
    """Reads data from a CSV file, analyzes it, and returns statistics.
    Args:
        file_path (str): The path to the CSV file.
    Returns:
        tuple: A tuple containing summary statistics as strings.
    """
    try:
        df = pd.read_csv(file_path)
    except FileNotFoundError:
        print(f"Error: File not found at path {file_path}")
        return None, None, None
    except pd.errors.EmptyDataError:
        print(f"Error: File at path {file_path} is empty")
        return None, None, None
    except pd.errors.ParserError:
        print(f"Error: File at path {file_path} is not valid csv")
        return None, None, None

    average_age = df['Age'].mean()
    highest_score = df['Score'].max()
    num_people = len(df)

    avg_age_str = f"Average Age: {average_age:.2f}"
    high_score_str = f"Highest Score: {highest_score}"
    num_people_str = f"Number of people: {num_people}"
    return avg_age_str, high_score_str, num_people_str

def create_pdf_report(file_path, output_path, avg_age_str, high_score_str, num_people_str):
    """Creates a PDF report including data, statistics, and a table.
    Args:
        file_path (str): The path to the CSV file for data.
        output_path (str): The path where the PDF report will be saved.
        avg_age_str (str): Formatted string for average age.
        high_score_str (str): Formatted string for highest score.
        num_people_str (str) : Formatted string for number of people in data.
    """
    doc = SimpleDocTemplate(output_path, pagesize=letter)
    story = []
    styles = getSampleStyleSheet()

    # Title
    title = Paragraph("Data Analysis Report", styles['h1'])
    story.append(title)
    story.append(Spacer(1, 12))

    # Load and format the data table
    try:
      df = pd.read_csv(file_path)
      data = [df.columns.to_list()] + df.values.tolist()
    except:
      data = [["Error", "Could not load data."]]
    table = Table(data)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    story.append(table)
    story.append(Spacer(1, 12))

    # Summary Statistics
    ptext1 = Paragraph(avg_age_str, styles['Normal'])
    ptext2 = Paragraph(high_score_str, styles['Normal'])
    ptext3 = Paragraph(num_people_str, styles['Normal'])
    story.append(ptext1)
    story.append(Spacer(1, 6))
    story.append(ptext2)
    story.append(Spacer(1, 6))
    story.append(ptext3)

    doc.build(story)

def main():
    """Main function to read data, analyze it, and generate a PDF report."""
    file_path = "data.csv"  # Path to your CSV data file
    output_path = "report.pdf"  # Path where PDF report will be saved

    avg_age_str, high_score_str, num_people_str = analyze_data(file_path)

    if avg_age_str and high_score_str and num_people_str:
       create_pdf_report(file_path, output_path, avg_age_str, high_score_str, num_people_str)
       print(f"PDF report generated at: {output_path}")
    else:
       print("Report not generated due to an error.")

if __name__ == "__main__":
    main()
